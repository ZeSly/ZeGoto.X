/*********************************************************************
 * FileName: HTTPPrint.h
 * Provides callback headers and resolution for user's custom
 * HTTP Application.
 * Processor: PIC18,PIC24E, PIC24F, PIC24H, dsPIC30F, dsPIC33F, dsPIC33E,PIC32
 * Compiler:  Microchip C18, C30, C32
 * 
 * This file is automatically generated by the MPFS Utility
 * ALL MODIFICATIONS WILL BE OVERWRITTEN BY THE MPFS GENERATOR
 *
 * Software License Agreement
 *
 * Copyright (C) 2012 Microchip Technology Inc.  All rights
 * reserved.
 *
 * Microchip licenses to you the right to use, modify, copy, and 
  * distribute: 
 * (i)  the Software when embedded on a Microchip microcontroller or 
 *      digital signal controller product ("Device") which is 
 *      integrated into Licensee's product; or 
 * (ii) ONLY the Software driver source files ENC28J60.c, ENC28J60.h,
 *		ENCX24J600.c and ENCX24J600.h ported to a non-Microchip device
 *		used in conjunction with a Microchip ethernet controller for
 *		the sole purpose of interfacing with the ethernet controller.
 *
 * You should refer to the license agreement accompanying this 
 * Software for additional information regarding your rights and 
 * obligations.
 *
 * THE SOFTWARE AND DOCUMENTATION ARE PROVIDED "AS IS" WITHOUT
 * WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
 * LIMITATION, ANY WARRANTY OF MERCHANTABILITY, FITNESS FOR A 
 * PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL
 * MICROCHIP BE LIABLE FOR ANY INCIDENTAL, SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF
 * PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY OR SERVICES, ANY CLAIMS
 * BY THIRD PARTIES (INCLUDING BUT NOT LIMITED TO ANY DEFENSE 
 * THEREOF), ANY CLAIMS FOR INDEMNITY OR CONTRIBUTION, OR OTHER 
 * SIMILAR COSTS, WHETHER ASSERTED ON THE BASIS OF CONTRACT, TORT
 * (INCLUDING NEGLIGENCE), BREACH OF WARRANTY, OR OTHERWISE.
 *
 *********************************************************************/

#ifndef __HTTPPRINT_H
#define __HTTPPRINT_H

#include "TCPIP_Stack/TCPIP.h"

#if defined(STACK_USE_HTTP2_SERVER)

extern HTTP_STUB httpStubs[MAX_HTTP_CONNECTIONS];
extern BYTE curHTTPID;

void HTTPPrint(DWORD callbackID);
void HTTPPrint_version(void);
void HTTPPrint_builddate(void);
void HTTPPrint_led(WORD);
void HTTPPrint_btn(WORD);
void HTTPPrint_status_fail(void);
void HTTPPrint_config_mac(void);
void HTTPPrint_config_hostname(void);
void HTTPPrint_config_dhcpchecked(void);
void HTTPPrint_config_ip(void);
void HTTPPrint_config_gw(void);
void HTTPPrint_config_subnet(void);
void HTTPPrint_config_dns1(void);
void HTTPPrint_config_dns2(void);
void HTTPPrint_reboot(void);
void HTTPPrint_rebootaddr(void);
void HTTPPrint_usbversion(void);
void HTTPPrint_tcpipversion(void);
void HTTPPrint_rightascension(void);
void HTTPPrint_declination(void);
void HTTPPrint_wikiskycoord(void);
void HTTPPrint_datetime(void);
void HTTPPrint_azimuthcoord(void);
void HTTPPrint_gpsdata(void);
void HTTPPrint_svggpssignal(void);
void HTTPPrint_gpssatellitesinview(void);
void HTTPPrint_gpssatellitesused(void);
void HTTPPrint_mountconfig_inverteddec(void);
void HTTPPrint_mountconfig_invertedra(void);
void HTTPPrint_mountconfig_nbmaxstep(void);
void HTTPPrint_mountconfig_maxrate(void);
void HTTPPrint_mountconfig_centeringrate(void);
void HTTPPrint_mountconfig_guidingrate(void);
void HTTPPrint_result(void);
void HTTPPrint_result_text(void);
void HTTPPrint_sideofpier(void);
void HTTPPrint_mountconfig_rabacklash(void);
void HTTPPrint_mountconfig_decbacklash(void);
void HTTPPrint_mountconfig_sideralp(void);
void HTTPPrint_mountconfig_lunarp(void);
void HTTPPrint_mountconfig_solarp(void);

void HTTPPrint(DWORD callbackID)
{
	switch(callbackID)
	{
        case 0x00000000:
			HTTPIncFile((ROM BYTE*)"header.inc");
			break;
        case 0x00000006:
			HTTPIncFile((ROM BYTE*)"footer.inc");
			break;
        case 0x00000007:
			HTTPPrint_version();
			break;
        case 0x00000008:
			HTTPPrint_builddate();
			break;
        case 0x0000000a:
			HTTPPrint_led(1);
			break;
        case 0x0000000b:
			HTTPPrint_led(2);
			break;
        case 0x00000012:
			HTTPPrint_btn(1);
			break;
        case 0x00000013:
			HTTPPrint_btn(2);
			break;
        case 0x00000014:
			HTTPPrint_btn(3);
			break;
        case 0x00000016:
			HTTPPrint_status_fail();
			break;
        case 0x00000017:
			HTTPPrint_config_mac();
			break;
        case 0x00000018:
			HTTPPrint_config_hostname();
			break;
        case 0x00000019:
			HTTPPrint_config_dhcpchecked();
			break;
        case 0x0000001a:
			HTTPPrint_config_ip();
			break;
        case 0x0000001b:
			HTTPPrint_config_gw();
			break;
        case 0x0000001c:
			HTTPPrint_config_subnet();
			break;
        case 0x0000001d:
			HTTPPrint_config_dns1();
			break;
        case 0x0000001e:
			HTTPPrint_config_dns2();
			break;
        case 0x0000001f:
			HTTPPrint_reboot();
			break;
        case 0x00000020:
			HTTPPrint_rebootaddr();
			break;
        case 0x0000003a:
			HTTPPrint_btn(4);
			break;
        case 0x0000003b:
			HTTPPrint_btn(5);
			break;
        case 0x0000003c:
			HTTPPrint_btn(6);
			break;
        case 0x0000003d:
			HTTPPrint_btn(7);
			break;
        case 0x0000003e:
			HTTPPrint_usbversion();
			break;
        case 0x0000003f:
			HTTPPrint_tcpipversion();
			break;
        case 0x00000040:
			HTTPPrint_rightascension();
			break;
        case 0x00000041:
			HTTPPrint_declination();
			break;
        case 0x00000042:
			HTTPPrint_wikiskycoord();
			break;
        case 0x00000044:
			HTTPPrint_datetime();
			break;
        case 0x00000045:
			HTTPPrint_azimuthcoord();
			break;
        case 0x00000046:
			HTTPPrint_gpsdata();
			break;
        case 0x00000047:
			HTTPPrint_svggpssignal();
			break;
        case 0x00000048:
			HTTPPrint_gpssatellitesinview();
			break;
        case 0x00000055:
			HTTPPrint_gpssatellitesused();
			break;
        case 0x00000056:
			HTTPPrint_mountconfig_inverteddec();
			break;
        case 0x00000057:
			HTTPPrint_mountconfig_invertedra();
			break;
        case 0x00000058:
			HTTPPrint_mountconfig_nbmaxstep();
			break;
        case 0x0000005a:
			HTTPPrint_mountconfig_maxrate();
			break;
        case 0x0000005b:
			HTTPPrint_mountconfig_centeringrate();
			break;
        case 0x0000005c:
			HTTPPrint_mountconfig_guidingrate();
			break;
        case 0x0000005d:
			HTTPPrint_result();
			break;
        case 0x0000005e:
			HTTPPrint_result_text();
			break;
        case 0x0000005f:
			HTTPPrint_sideofpier();
			break;
        case 0x00000062:
			HTTPPrint_mountconfig_rabacklash();
			break;
        case 0x00000063:
			HTTPPrint_mountconfig_decbacklash();
			break;
        case 0x00000064:
			HTTPPrint_mountconfig_sideralp();
			break;
        case 0x00000065:
			HTTPPrint_mountconfig_lunarp();
			break;
        case 0x00000066:
			HTTPPrint_mountconfig_solarp();
			break;
		default:
			// Output notification for undefined values
			TCPPutROMArray(sktHTTP, (ROM BYTE*)"!DEF", 4);
	}

	return;
}

void HTTPPrint_(void)
{
	TCPPut(sktHTTP, '~');
	return;
}

#endif

#endif
